# Demonstration Kubernetes CI/CD Pipeline

version: v1.0
name: Semaphore CI/CD Kubernetes Demo
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

blocks:
  - name: Docker Build
    task:
      env_vars:
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        - name: ECR_REGISTRY
          value: 961317956813.dkr.ecr.us-east-1.amazonaws.com/node-cicd-kubernetes

      secrets:
        - name: AWS

      # The prologue runs *before* each job in the block
      prologue:
        commands:
          # Install the most up-to-date AWS cli
          - sudo pip install awscli
          # clone the repo
          - checkout
          # ecr get-login outputs a login command, so execute that with bash
          - aws ecr get-login --no-include-email | bash

      # Build docker image with cache
      # we're using $SEMAPHORE_WORKFLOW_ID to uniquely tag the image in all pipelines
      jobs:
        - name: Build
          commands:
            - docker pull "${ECR_REGISTRY}":latest || true
            - docker build --cache-from "${ECR_REGISTRY}":latest -t "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID .
            - docker push "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID

  # This block runs all the tests *inside* the docker image
  - name: Tests
    task:
      env_vars:
        - name: NODE_ENV
          value: test
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        - name: ECR_REGISTRY
          value: 961317956813.dkr.ecr.us-east-1.amazonaws.com/node-cicd-kubernetes

      secrets:
        - name: AWS

      # Pull the latest image to speed up builds
      prologue:
        commands:
          # Install the most up-to-date AWS cli
          - sudo pip install awscli
          # ecr get-login outputs a login command, so execute that with bash
          - aws ecr get-login --no-include-email | bash

      jobs:
        # Static code test. Run a javascript linter.
        - name: Static test
          commands:
            - docker run -it "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID npm run lint

        # The integration test uses a local postgres db.
        - name: Integration test
          commands:
            - sem-service start postgres
            - docker run --net=host -it "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID npm run test

        # The functional test and db migration uses a local postgres db.
        - name: Functional test
          commands:
            - sem-service start postgres
            - docker run --net=host -it "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID npm run ping
            - docker run --net=host -it "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID npm run migrate

  # Push the current image to Semaphore private registry with the latest tag
  # so it's available as cache for future builds.
  - name: Push as latest
    task:
      env_vars:
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        - name: ECR_REGISTRY
          value: 961317956813.dkr.ecr.us-east-1.amazonaws.com/node-cicd-kubernetes

      secrets:
        - name: AWS

      prologue:
        commands:
          # Install the most up-to-date AWS cli
          - sudo pip install awscli
          # ecr get-login outputs a login command, so execute that with bash
          - aws ecr get-login --no-include-email | bash

      jobs:
        - name: Push
          commands:
            - docker pull "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID
            - docker tag "${ECR_REGISTRY}":$SEMAPHORE_WORKFLOW_ID "${ECR_REGISTRY}":latest
            - docker push "${ECR_REGISTRY}":latest

# Canaries will automatically start when branch is master or the commit is tagged as hotfix*
# Uncomment the relevant promotion for your favorite cloud below.
# promotions:
  # - name: Canary Deployment (DigitalOcean)
    # pipeline_file: deploy-canary-digitalocean.yml
    # auto_promote:
      # when: "result = 'passed' and (branch = 'master' or tag =~ '^hotfix*')"
  # - name: Canary Deployment (AWS)
  #   pipeline_file: deploy-canary-aws.yml
  #   auto_promote:
  #     when: "result = 'passed' and (branch = 'master' or tag =~ '^hotfix*')"
  # - name: Canary Deployment (GCP)
  #   pipeline_file: deploy-canary-gcp.yml
  #   auto_promote:
  #     when: "result = 'passed' and (branch = 'master' or tag =~ '^hotfix*')"
